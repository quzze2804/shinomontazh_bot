import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 7285220061))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –í—ñ–ª—å–Ω—ñ —Å–ª–æ—Ç–∏
time_slots = [
    "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30",
    "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30",
    "16:00", "16:30", "17:00"
]
bookings = {}

class BookingStates(StatesGroup):
    waiting_for_time = State()
    waiting_for_name = State()
    waiting_for_phone = State()

def create_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    buttons = []
    for time in time_slots:
        if time in bookings:
            buttons.append(KeyboardButton(f"‚ùå {time}"))
        else:
            buttons.append(KeyboardButton(time))
    keyboard.add(*buttons)
    return keyboard

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–°—Ç–∞—Ä—Ç"))
    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ —É —Å–µ—Ä–≤—ñ—Å—ñ –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—É –Ω–∞ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂!\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–°—Ç–∞—Ä—Ç¬ª, —â–æ–± –æ–±—Ä–∞—Ç–∏ –∑—Ä—É—á–Ω–∏–π —á–∞—Å üõû\n"
        "üïó –ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏: 08:00 ‚Äì 17:00", reply_markup=keyboard)

@dp.message_handler(lambda m: m.text == "–°—Ç–∞—Ä—Ç")
async def start_booking(message: types.Message):
    await BookingStates.waiting_for_time.set()
    await message.answer("üïí –û–±–µ—Ä—ñ—Ç—å –≤—ñ–ª—å–Ω–∏–π —á–∞—Å:", reply_markup=create_keyboard())

@dp.message_handler(state=BookingStates.waiting_for_time)
async def time_chosen(message: types.Message, state: FSMContext):
    selected_time = message.text.replace("‚ùå", "").strip()
    if selected_time not in time_slots or selected_time in bookings:
        await message.answer("‚õîÔ∏è –¶–µ–π —á–∞—Å –∑–∞–π–Ω—è—Ç–∏–π –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π.")
        return
    await state.update_data(time=selected_time)
    await BookingStates.next()
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(state=BookingStates.waiting_for_name)
async def name_chosen(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await BookingStates.next()
    await message.answer("üìû –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

@dp.message_handler(state=BookingStates.waiting_for_phone)
async def phone_chosen(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    time = user_data['time']
    name = user_data['name']
    phone = message.text

    bookings[time] = {"name": name, "phone": phone, "user_id": message.from_user.id}

    await message.answer(
        f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ {time}!\n"
        f"üë§ –Ü–º‚Äô—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )

    await bot.send_message(
        ADMIN_ID,
        f"üîî –ù–æ–≤–∞ –±—Ä–æ–Ω—å:\nüïí {time}\nüë§ {name}\nüìû {phone}"
    )
    await state.finish()

@dp.message_handler(commands=['mybooking'])
async def my_booking(message: types.Message):
    user_id = message.from_user.id

    found_time = None
    found_data = None
    for time, data in bookings.items():
        if data.get("user_id") == user_id:
            found_time = time
            found_data = data
            break

    if found_time:
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å", callback_data="cancel_booking"),
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å", callback_data="reschedule_booking")
        )
        await message.answer(
            f"üîî –£ —Ç–µ–±–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –∑–∞–ø–∏—Å:\n"
            f"üïí {found_time}\nüë§ {found_data['name']}\nüìû {found_data['phone']}",
            reply_markup=kb
        )
    else:
        await message.answer("‚ÑπÔ∏è –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É.")



@dp.callback_query_handler(lambda c: c.data == "cancel_booking")
async def cancel_booking(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    for time in list(bookings):
        if bookings[time].get("user_id") == user_id:
            del bookings[time]
            await callback.message.edit_text("‚úÖ –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—à ‚Äî –º–æ–∂–µ—à –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ /start üòâ")
            return
    await callback.message.edit_text("‚ÑπÔ∏è –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É
@dp.callback_query_handler(lambda c: c.data == "cancel_booking")
async def cancel_booking(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    global bookings
    for time in list(bookings):
        if bookings[time].get("user_id") == user_id:
            del bookings[time]
            await callback.message.edit_text("‚úÖ –í–∞—à –∑–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—à ‚Äî –º–æ–∂–µ—à –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ /start üòâ")
            return
    await callback.message.edit_text("‚ÑπÔ∏è –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É.")

# –ö–ª–∞—Å –¥–ª—è —Å—Ç–∞–Ω—ñ–≤ –ø–µ—Ä–µ–Ω–æ—Å—É
class RescheduleStates(StatesGroup):
    waiting_for_new_time = State()

# –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å—É
@dp.callback_query_handler(lambda c: c.data == "reschedule_booking")
async def reschedule_booking_start(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_booking = None
    for time, data in bookings.items():
        if data.get("user_id") == user_id:
            user_booking = time
            break
    if not user_booking:
        await callback.message.edit_text("‚ÑπÔ∏è –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å—É.")
        return

    await RescheduleStates.waiting_for_new_time.set()
    await state.update_data(old_time=user_booking)
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –≤—ñ–ª—å–Ω–∏–º–∏ —Å–ª–æ—Ç–∞–º–∏
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    buttons = []
    for time in time_slots:
        if time in bookings and time != user_booking:
            buttons.append(KeyboardButton(f"‚ùå {time}"))
        else:
            buttons.append(KeyboardButton(time))
    keyboard.add(*buttons)
    await callback.message.answer("üïì –û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —á–∞—Å –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å—É:", reply_markup=keyboard)

# –í–∏–±—ñ—Ä –Ω–æ–≤–æ–≥–æ —á–∞—Å—É
@dp.message_handler(state=RescheduleStates.waiting_for_new_time)
async def process_new_time(message: types.Message, state: FSMContext):
    new_time = message.text.replace("‚ùå", "").strip()
    data = await state.get_data()
    old_time = data.get("old_time")

    if new_time not in time_slots:
        await message.answer("‚õîÔ∏è –ù–µ–¥—ñ–π—Å–Ω–∏–π —á–∞—Å, –æ–±–µ—Ä—ñ—Ç—å —á–∞—Å –∑—ñ —Å–ø–∏—Å–∫—É.")
        return

    if new_time in bookings and new_time != old_time:
        await message.answer("‚õîÔ∏è –¶–µ–π —á–∞—Å –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π.")
        return

    bookings[new_time] = bookings.pop(old_time)

    await message.answer(f"‚úÖ –¢–≤—ñ–π –∑–∞–ø–∏—Å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∑ {old_time} –Ω–∞ {new_time}.")
    await bot.send_message(ADMIN_ID, f"‚ôªÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {bookings[new_time]['name']} –ø–µ—Ä–µ–Ω—ñ—Å –∑–∞–ø–∏—Å –∑ {old_time} –Ω–∞ {new_time}.")
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
